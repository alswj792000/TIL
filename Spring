SpringBoot 개념정리_스프링의 핵심은 무엇인가요?

<blockquote data-ke-style="style2">Spring의 핵심 9가지</blockquote>
<p data-ke-size="size16"><b>1. 스프링은 <span style="color: #006dd7;">Framework</span>이다</b></p>
<p data-ke-size="size16">Frame 틀 + work 동작하다 = 틀 안에서 동작하다</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16"><b>2. 스프링은 <span style="color: #006dd7;">오픈 소스</span>이다</b></p>
<p data-ke-size="size16">소스 코드가 공개되어있다는것을 말한다</p>
<p data-ke-size="size16">= Spring이 어떻게 만들어졌는지 내부를 볼 수 있음</p>
<p data-ke-size="size16">즉, 내부를 뜯어고칠수 있음(고쳐서 기여contribute를 할 수 있음)</p>
<p data-ke-size="size16">무료</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16"><b>3. 스프링은 <span style="color: #006dd7;">IoC 컨테이너</span>를 가진다 ★</b></p>
<p data-ke-size="size16">※ IoC(Inversion of Controll = 제어의 역전 )</p>
<blockquote data-ke-style="style3"><b>Class</b> : 설계도 ( object를 만들기 위한?)<br />- class<br />- abstract class (추상 클래스)<br /><b>Object</b> : 실체화가 가능한 것<br /><b>Instance</b> : 실체화 된것&nbsp;<br /><br />ex) 가구(추상적인 것) - 의자(objcet) / 침대(object)</blockquote>
<blockquote data-ke-style="style3">제어의 역전 : 주도권을 빼았겼다. = 주도권이 Spring에 있다.<br /><br />일반적으로 레퍼런스 변수 주소는 각각의 메서드가 관리함<br />[##_Image|kage@dPVZEO/btrsNygWjdx/Yi1Chp9eXR9y68KKoeZA80/img.png|CDM|1.3|{"originWidth":1300,"originHeight":398,"style":"alignCenter"}_##]<br /><br />스프링은 들고있는 수많은 오브젝트들을 class로 만들어둔 것을 스캔하고 읽어서 자기가 이 객체들을 직접 띄움(heap 메모리 공간에)<br />[##_Image|kage@sgukI/btrsNxoNmhC/eaoY2lLTwRMPlsIi1NMjsK/img.png|CDM|1.3|{"originWidth":604,"originHeight":459,"style":"alignCenter"}_##]</blockquote>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">4. 스프링은 <span style="color: #006dd7;"><b>DI</b></span>를 지원한다. ★</p>
<p data-ke-size="size16">※ DI (Dependency Injection) : 의존성 주입</p>
<p data-ke-size="size16">개발자가 아니라 spring이 object를 스캔을 해서 heap메모리 영역에 띄웠기 때문에 Spring이 관리하게 됨(IoC : 제어의 역전)</p>
<p data-ke-size="size16">내가 원하는 모든 class의 메소드에서 heap메모리 영역에 있는 값들을 가져와서 사용할 수 있음(DI)</p>
<p data-ke-size="size16">= 같은 "의자"를 여러곳에서 사용할 수 있음 ( 싱글톤)</p>
<p data-ke-size="size16">&rarr; 스캔시 딱 하나의 "의자"가 뜨고, 딱 한번 뜬 "의자"를 공유해서 사용할 수 있음</p>
<p data-ke-size="size16">=&gt; 필요한 곳에 가져가서 쓰는것을 DI라고 함</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">5. 스프링은 엄청나게 많은 필터를 가지고 있다.</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">6. 스프링은 엄청나게 많은 어노테이션을 가지고 있다.</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">7. 스프링은 MessageConverter를 가지고 있다. 기본값은 현재 Json이다.</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">8. 스프링은&nbsp; BufferedReader와 BufferedWriter를 쉽게 사용할 수 있다.</p>
<p data-ke-size="size16">&nbsp;</p>
<p data-ke-size="size16">9. 스프링은 계속 발전 중이다.</p>
