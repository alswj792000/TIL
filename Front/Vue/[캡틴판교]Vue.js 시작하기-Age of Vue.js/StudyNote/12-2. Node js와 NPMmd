# Node.js와 NPM

섹션: 최종 프로젝트-사용자 입력 폼 만들기
수강일: 2022년 9월 28일 → 2022년 9월 29일
진행도: 1

[학습 페이지](https://www.inflearn.com/course/%ED%94%84%EB%9F%B0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9B%B9%ED%8C%A9/unit/37370?tab=curriculum)

[Node.js & NPM | 웹팩 핸드북](https://joshua1988.github.io/webpack-guide/build/node-npm.html)

---

# Node.js와 NPM 소개

### ✔ Node.js

Node.js는 브라우저 밖에서도 자바스크립트를 실행할 수 있는 환경을 의미한다. 

Node.js가 나오기 전까지는 자바스크립트가 브라우저의 동작을 제어하는데 사용되었고 브라우저에서만 실행할 수 있었지만 이제는 Node.js로 자바스크립트를 브라우저 밖에서도 실행할 수 있게 되었다.

[Node.js](https://nodejs.org/en/)

- `LTS(Long Term Support)` ver.로 다운로드하는것을 추천
    - 더 많은 라이브러리와 호환되기때문에 버그가 날 확률이 줄어든다.

### ✔ NPM

NPM(Node Package Manager)는 명령어로 자바스크립트 라이브러리를 설치하고 관리할 수 있는 패키지 관리자. 즉, JavaScript 라이브러리를 관리해주는 도구, 공개 저장소이다.

전 세계 자바스크립트 개발자들이 모두 자바스크립트 라이브러리를 공개된 저장소에 올려놓고 npm 명령어로 편하게 다운로드 받을 수 있습니다.

[npm](https://www.npmjs.com/)

---

# NPM 시작하기

### ✔ Node.js와 NPM 설치 확인

<aside>
💡 터미널 열기 : `ctrl + ``

</aside>

1. `node -v` : 깔려있는 node.js의 버전 확인
2. `npm -v` : 깔려있는 npm의 버전확인. *** npm은 node.js가 설치되면서 같이 설치된다.**

---

# NPM 초기화 명령어 - init

1. `npm init` 실행
    - package name : 패키지 이름
    - version
    - description
    - entry point
    - test command
    - git repository
    - keywords
    - author
    - ….
2. `package.json` 생성 확인 

<aside>
💡 `package.json`에서 수정이 가능하기때문에 굳이 `npm init` 으로 생성할 필요가 없다.
→ `npm init -y`로 생성하면 기본값이 자동으로 생성된다.

</aside>

---

# NPM 설치 명령어 - install

1. `npm install jquery` : 특정라이브러리(jquery)를 설치하겠다는 명령어
2. 해당 폴더에 `node_modules` 폴더가 생성된것을 확인할 수 있다.
    - 특정 라이브러리(jquery)를 설치하겠다고 했기때문에 `node_modules`안에 `jquery`폴더가 생성된다.
    - 일반적으로 특정 라이브러리를 설치했을때는 해당 폴더 밑에 필요한 라이브러리가 있다.
        - `dist` 폴더 밑에 있는 jquery.js가 일반적으로 사용해왔던 jquery 라이브러리
3. 해당 폴더 밑에 있는 `package.json`에서 설치된 Jquery의 버전까지 확인할 수 있다.

---

# NPM을 사용하는 이유와 장점

### ✔ 라이브러리 관리

특정 라이브러리가 다른 라이브러리 버전에 영향을 받는 **라이브러리간의 의존관계**때문에 라이브러리 관리가 필요하다.

사용한 라이브러리의 개수가 적을때는 상관없지만 개수가 많아졌을때는 일일히 관리하기가 번거롭다.

이러한 내용을 `package.json`에 와서 정리하면 깔끔하게 라이브러리들의 목록과 버전까지 관리할 수 있다.

![Untitled](Node%20js%E1%84%8B%E1%85%AA%20NPM%20f5817c6c91814b5d9a127c1823674f2c/Untitled.png)

### ✔ npm install ‘라이브러리’

일반적으로 `<script>`를 이용한 Javascript 라이브러리 로딩 방식을 사용했을때는 [브라우저](https://releases.jquery.com/)로 넘어가서 jquery 스크립트  태그를 들고와서 jquery를 사용할 수 있었다.

이런식으로 작업하면 번거롭고 원하는 내용을 찾을때까지 시간도 많이 걸리기때문에 필요한 내용을 `npm install jquery`로 설치해 사용할 수 있다.

---

# NPM 제거 명령어 - uninstall

1. 터미널에 `npm install gulp`로 gulp 설치
2. node_modules에 gulp 설치된것 확인 가능
3. 터미널에 `npm uninstall gulp` 실행
4. node_modules와 package.json에서 gulp가 제거된것을 확인할 수 있다.

---

# NPM 전역 설치 명령어 - install —global

1. 터미널에 `npm install gulp —global`로 gulp 설치
    - 이때 Permission 에러가 발생할 경우 `sudo npm install gulp — global`로 설치
    
    <aside>
    📌 라이브러리를 설치완료 한 후 `log`를 보면 라이브러리와 버전이 나오는데, 설치과정에서 스펠링이 잘못되었을때 다른 라이브러리가 설치되기도하므로 주의할것!
    
    </aside>
    
2. node_modules 밑에 jquery와 jquery UI만 있는것을 확인 할 수 있고 gulp는 확인 할 수 없다.
    
    

<aside>
💡 라이브러리가 설치되고 나면 이제 명령어 실행 창에 해당 라이브러리 이름을 입력했을 때 명령어를 인식한다.

![Untitled](Node%20js%E1%84%8B%E1%85%AA%20NPM%20f5817c6c91814b5d9a127c1823674f2c/Untitled%201.png)

</aside>

---

# 전역으로 설치된 라이브러리 경로 확인

### ✔ NPM 전역 설치 경로

전역으로 설치된 자바스크립트 라이브러리는 어느 위치에서 해당 명령어를 실행했던지 간에 OS별로 아래와 같은 폴더 경로에 설치된다.

```jsx
# window
%USERPROFILE%\AppData\Roaming\npm\node_modules
```

<aside>
📌 시스템상에서 명령어를 인식할 수 있게 제공하는 라이브러리 중 하나가 `gulp`이다.
시스템 레벨에서 설치했을때는 시스템에서 그 라이브러리에서 제공하는 명령어 기능들을 활용하기 위해 `global`로 많이 설치한다. 
따라서 이 `global`은 시스템 레벨에 전역으로 설치하는것을 말한다.

</aside>

---

# 지역 설치와 전역(—global) 설치 비교 정리

|  | 지역 설치 | 전역 설치 |
| --- | --- | --- |
|  | 해당 프로젝트에서 사용할 자바스크립트 라이브러리를 설치할때 사용한다. | 시스템 레벨에서 사용할 자바스크립트 라이브러리를 설치할 때 사용한다. |
| 명령어 | npm install jquery —save-prod
npm install jquery
npm i jquery | npm install gulp —global
npm install gulp —g |
| 설치 경로 | 해당 프로젝트의 node_modules밑에 해당 라이브러리 파일들이 설치 | # window
%USERPROFILE%\AppData\Roaming\npm\node_modules

# mac
/usr/local/lib/node_modules |

---

# 지역 설치 명령어 옵션 —save-dev(-D)

```jsx
npm install jquery --save-dev  // npm i jquery -D
```

pacakage.json에서 설치가 된 것을 확인할 수 있다.

---

# dependencies와 devDependencies의 차이점

### ✔ dependencies

`npm i jquery jquery-ui` 로 설치한 내용

**애플리케이션의 로직을 구현, 동작하는데 연관있는 직접적인 로직**들이 들어간다. → **배포용 라이브러리**

대표적으로 `jquery`, `jquery-ui`, `react`, `angular`, `chart`, `vue` 등이 있다.

### ✔ devDependencies

`npm i vue -D`, `npm i vue —save-dev`로 설치한 내용

**개발을 할때 도움을 주는 개발 보조 라이브러리**들이 들어간다. → **개발용 라이브러리**

대표적으로 `webpack`, `js-compression`, `sass` 등이 있다.

---

# 개발용 라이브러리와 배포용 라이브러리 구분하기

`npm run build`로 빌드를 하면 **프로덕션 모드**가 잡히게 된다.

이때 **프로덕션에는 `devDependencies`에 들어가있는 라이브러리는 설치가 되지 않는다.**

따라서 빌드를 하고 최종서버에 배포를 할때는 `**devDependencies`에 들어있는 라이브러리는 배포가 되지 않으므로 주의**해야 한다.

<aside>
💡 `dependencies`와 `devDependencies`의 구분없이 작업하다가 dependencies에 필요없는 라이브러리가 들어가 빌드가 오래 걸렸던 경우가 있다.

따라서 구분에 대한 내용은 [npm](https://www.npmjs.com/)에서 `Installation` 부분을 참고해 진행하면 된다.

</aside>